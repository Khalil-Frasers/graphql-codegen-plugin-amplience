type Base @amplience(visualizations: true) {
  text: String!
    @text(minLength: 2, maxLength: 4, format: markdown)
    @example(items: ["one example", "another example"])
  optionalText: String
  textList: [String!]! @list(minItems: 1, maxItems: 10)
  integer: Int! @number(minimum: 0, maximum: 10)
  optionalInteger: Int
  float: Float! @number(minimum: 0, maximum: 10)
  optionalFloat: Float
  boolean: Boolean!
  optionalBoolean: Boolean
  constString: String @const(item: "const")
  constArray: [String!]! @const(items: ["this", "is", "const"])
  image: AmplienceImage!
  video: AmplienceVideo!
  enum: Enum
  a: A
  bs: [B]
  union: Union
  linkedA: A @link
  referencedB: B @reference
}

type TestSlot @amplience(validationLevel: SLOT) {
  name: String
}

enum Enum {
  a
  b
}

union Union = A | B

type A @amplience {
  a: String!
}

type B @amplience {
  b: String!
}

type Localized @amplience(repository: "website2") {
  string: String! @localized
  boolean: Boolean! @localized
  Int: Boolean! @localized
  Float: Boolean! @localized
  image: AmplienceImage! @localized
  video: AmplienceVideo! @localized
}
